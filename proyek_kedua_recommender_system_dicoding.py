# -*- coding: utf-8 -*-
"""Proyek Kedua  Recommender System Dicoding

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TXJmU8hgWh9oEabGVWjEzvzdtK0KLLIs

# 1. Instal dan import library
"""

#Instal requirement yang di butuhkan 
!pip install opendatasets
!pip install optuna

import os
import zipfile
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
import optuna
import opendatasets
import os

os.environ['Your Kaggle username:'] = "fransiskusricardo"
os.environ['Your Kaggle Key:'] = "e178a4405fe43a23694788cd680b92fe"

"""#2. Load Dataset"""

if os.path.exists('book-recommendation-dataset'):
  print("file sudah ada")
else:
  opendatasets.download_kaggle_dataset(dataset_url='https://www.kaggle.com/datasets/arashnic/book-recommendation-dataset', data_dir='')

"""#3. Data understanding"""

# Load dataset

books = pd.read_csv('book-recommendation-dataset/Books.csv')
ratings = pd.read_csv('book-recommendation-dataset/Ratings.csv')
users = pd.read_csv('book-recommendation-dataset/Users.csv')

"""Informasi data:

Attribute  | Keterangan
------------- | -------------
Books.csv
Sumber | https://www.kaggle.com/datasets/arashnic/book-recommendation-dataset
ISBN | Kode ISBN dari Buku
Book-Title | Judul Buku
Book-Author | Nama Penulis buku
Year-Of-Publication | Tahun Terbit Buku
Publisher | Nama Penerbit Buku
Image-URL-S | URL Menuju Gambar Buku Berukuran Kecil
Image-URL-M | URL Menuju Gambar Buku Berukuran Sedang
Image-URL-L | URL menuju Gambar Buku Berukuran Besar
Ratings.csv

"""

print("Books Shape: " ,books.shape)
print("Ratings Shape: " ,ratings.shape)
print("Users Shape: " ,users.shape)

"""## 3.1. Book (Buku)

Berikut akan memuat isi file Books.csv.
"""

books

books.info()

"""Pada dataset Books.csv terdapat 271360 baris dan 8 kolom. Pada kolom berisi data Book-Title, Book-Author, Year-Of-Publication, Publisher, Image-URL-S, Image-URL-M, Image-URL-L


Informasi data Books.csv :

Attribute  | Keterangan
------------- | -------------
ISBN | Kode ISBN dari Buku
Book-Title | Judul Buku
Book-Author | Nama Penulis buku
Year-Of-Publication | Tahun Terbit Buku
Publisher | Nama Penerbit Buku
Image-URL-S | URL Menuju Gambar Buku Berukuran Kecil
Image-URL-M | URL Menuju Gambar Buku Berukuran Sedang
Image-URL-L | URL menuju Gambar Buku Berukuran Besar

## 3.2. Ratings

Berikut akan memuat isi file Ratings.csv.
"""

ratings

"""Selanjutnya, menghitung Jumlah buku pada setiap reting."""

ratings.groupby('Book-Rating').count()

"""Selanjutnya akan mengecek distribusi rating pada Ratings.csv, mengunakan fungsi **describe()**."""

ratings.describe().apply(lambda s: s.apply(lambda x: format(x, 'f')))

"""Selanjutnya, akan di visualisasikan jumlah reting yang diberikan oleh user."""

rating_counter = ratings.groupby('Book-Rating').count()
plt.figure(figsize=(10,8))
plt.title('Visualisasi Rating Buku yang Diberikan Pengguna')
plt.xlabel('Rating')
plt.ylabel('Jumlah Buku')
plt.bar(rating_counter.index, rating_counter['ISBN'])
plt.grid(True)
plt.show()

"""Pada visualisasi diagram diperoleh bahwa reting yang diberikan dari 0 sampai 10 dan mayoritas user memberikan rating 0 pada buku, sehingga data tersebut tidak seimbang (imbalance)."""

ratings.info()

"""Pada dataset Ratings.csv terdapat 1149780 baris dan 3 kolom. Pada kolom berisi data ISBN, Book-Rating.


Informasi data Ratings.csv :

Attribute  | Keterangan
------------- | -------------
User-ID | ID Pengguna
ISBN | Kode ISBN dari Buku
Book-Rating | Rating Buku

## 3.3. Users

Berikut akan memuat isi file Users.csv.
"""

users

"""Selanjutnya akan mengecek distribusi umur user pada Users.csv, mengunakan fungsi describe()."""

users.describe()

users.info()

"""Pada dataset Users.csv terdapat 278858 baris dan 3 kolom. Pada kolom berisi data User-ID, Location, Age .


Informasi data Users.csv :

Attribute  | Keterangan
------------- | -------------
User-ID | ID Pengguna
Location | Lokasi Pengguna
Age | Usia Pengguna

# 4. Data Preparation

## 4.1. Menggabungkan data pada Books.csv dan Ratings.csv berdasarkan ISBN
"""

data_buku = pd.merge(books, ratings , on='ISBN', how='left')
data_buku

"""## 4.2. Encoding Data

Pada tahap ini akan Encoding User-ID dan ISBN ke dalam indeks integer
"""

# Mengubah userID menjadi unik
user_ids = ratings['User-ID'].unique().tolist()
 
# Melakukan encoding userID
user_to_user_encoded = {x: i for i, x in enumerate(user_ids)}
 
# Melakukan proses encoding angka ke ke userID
user_encoded_to_user = {i: x for i, x in enumerate(user_ids)}

# Mengubah ISBN menjadi unik
isbn_list = ratings['ISBN'].unique().tolist()
 
# Melakukan encoding ISBN
isbn_to_isbn_encoded = {x: i for i, x in enumerate(isbn_list)}
 
# Melakukan proses encoding angka ke ISBN
isbn_encoded_to_isbn = {i: x for i, x in enumerate(isbn_list)}

"""Selanjurnya akan dilakukan mapping ke dataframe ratings"""

# Mapping userID ke dataframe user
ratings['user'] = ratings['User-ID'].map(user_to_user_encoded)

# Mapping ISBN ke dataframe user
ratings['book'] = ratings['ISBN'].map(isbn_to_isbn_encoded)

ratings

"""Selanjutnya akan dicek jumlah user, jumlah buku, dan mengubah nilai rating menjadi float."""

# Mendapatkan jumlah user
num_users = len(user_to_user_encoded)
 
# Mendapatkan jumlah buku berdasarkan ISBN
num_isbn = len(isbn_encoded_to_isbn)
 
# Mengubah rating menjadi nilai float
ratings['Book-Rating'] = ratings['Book-Rating'].values.astype(np.float32)
 
# Nilai minimum Book-Rating
min_rating = min(ratings['Book-Rating'])
 
# Nilai maksimal Book-Rating
max_rating = max(ratings['Book-Rating'])
 
print('Jumlah user: {}, Jumlah buku berdasarkan ISBN : {}, \nMin Rating: {}, Max Rating: {}'.format(
    num_users, num_isbn, min_rating, max_rating
))

"""## 4.3. Membagi Data untuk Training dan Validasi

Pada tahap ini, akan dilakukan pembagian data menjadi data training dan validasi. 

Sebelumnya, akan diacak datanya untuk membuat distribusinya menjadi random.
"""

# Mengacak dataset
df = ratings.sample(frac=1, random_state=42)
df

"""Pada proses ini dataset dibagi menjadi 2 bagian, yaitu data yang akan digunakan untuk melatih model sebanyak 80% dan data untuk memvalidasi model sebanyak 20%."""

# Membuat variabel x untuk mencocokkan data user dan book menjadi satu value
x = df[['user', 'book']].values
 
# Membuat variabel y untuk membuat rating dari hasil 
y = df['Book-Rating'].apply(lambda x: (x - min_rating) / (max_rating - min_rating)).values
 
# Membagi menjadi 80% data train dan 20% data validasi
train_indices = int(0.8 * df.shape[0])
x_train, x_val, y_train, y_val = (
    x[:train_indices],
    x[train_indices:],
    y[:train_indices],
    y[train_indices:]
)

"""# 5. Modeling

## 5.1. Membuat Kelas RecommenderNet
"""

class RecommenderNet(tf.keras.Model):
 
  # Insialisasi fungsi
  def __init__(self, num_users, num_isbn, embedding_size, **kwargs):
    super(RecommenderNet, self).__init__(**kwargs)
    self.num_users = num_users
    self.num_isbn = num_isbn
    self.embedding_size = embedding_size
    self.user_embedding = layers.Embedding( # layer embedding user
        num_users,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )
    self.user_bias = layers.Embedding(num_users, 1) # layer embedding user bias
    self.book_embedding = layers.Embedding( # layer embeddings book
        num_isbn,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )
    self.book_bias = layers.Embedding(num_isbn, 1) # layer embedding book bias
 
  def call(self, inputs):
    user_vector = self.user_embedding(inputs[:,0]) # memanggil layer embedding 1
    user_bias = self.user_bias(inputs[:, 0]) # memanggil layer embedding 2
    book_vector = self.book_embedding(inputs[:, 1]) # memanggil layer embedding 3
    book_bias = self.book_bias(inputs[:, 1]) # memanggil layer embedding 4
 
    dot_user_book = tf.tensordot(user_vector, book_vector, 2) 
 
    x = dot_user_book + user_bias + book_bias
    
    return tf.nn.sigmoid(x) # activation sigmoid

"""Selanjutnya, lakukan proses compile terhadap model."""

tf.keras.backend.clear_session()

# Menerapkan nilai parameter paling optimal dari optuna
BEST_EMBEDDING_SIZE = 1

model = RecommenderNet(num_users, num_isbn, BEST_EMBEDDING_SIZE)

model.compile(
    loss = tf.keras.losses.BinaryCrossentropy(),
    optimizer = keras.optimizers.Adam(learning_rate=0.001),
    metrics=[tf.keras.metrics.RootMeanSquaredError()]
)

"""Pada model digunkana Binary Crossentropy untuk menghitung loss function, Adam (Adaptive Moment Estimation) sebagai optimizer, dan root mean squared error (RMSE) sebagai metrics evaluation.

## 5.2 Melatih Model
"""

# Memulai training
 
history = model.fit(
    x = x_train,
    y = y_train,
    batch_size=64,
    epochs = 10,
    validation_data = (x_val, y_val)
)

"""# 6. Evaluasi"""

plt.plot(history.history['root_mean_squared_error'])
plt.plot(history.history['val_root_mean_squared_error'])
plt.title('model_metrics')
plt.ylabel('root_mean_squared_error')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.grid(True)
plt.show()

"""## 6.1. Mendapatkan Rekomendasi"""

books_df = books
df = pd.read_csv('book-recommendation-dataset/Ratings.csv')
 
# Mengambil sample user
user_id = df['User-ID'].sample(1).iloc[0]
book_read_by_user = df[df['User-ID'] == user_id]
 
# Operator bitwise (~), bisa diketahui di sini https://docs.python.org/3/reference/expressions.html 
book_not_read = books_df[~books_df['ISBN'].isin(book_read_by_user.ISBN.values)]['ISBN']
book_not_read = list(
    set(book_not_read)
    .intersection(set(isbn_to_isbn_encoded.keys()))
)
 
book_not_read = [[isbn_to_isbn_encoded.get(x)] for x in book_not_read]
user_encoder = user_to_user_encoded.get(user_id)
user_book_array = np.hstack(
    ([[user_encoder]] * len(book_not_read), book_not_read)
)

"""Selanjutnya, untuk memperoleh rekomendasi buku, mengunakan fungsi model.predict()."""

ratings = model.predict(user_book_array).flatten()
 
top_ratings_indices = ratings.argsort()[-10:][::-1]
recommended_book_isbns = [
    isbn_encoded_to_isbn.get(book_not_read[x][0]) for x in top_ratings_indices
]
 
print('Rekomendasi untuk users: {}'.format(user_id))
print('===' * 9)
print('Buku dengan peringkat tinggi dari user lain')
print('----' * 8)
 
top_book_user = (
    book_read_by_user.sort_values(
        by = 'Book-Rating',
        ascending=False
    )
    .head(5)
    .ISBN.values
)
 
book_df_rows = books_df[books_df['ISBN'].isin(top_book_user)]
for row in book_df_rows.itertuples():
    print(row._3, "-", row._2)
 
print('----' * 8)
print('Top 10 Rekomendasi Buku')
print('----' * 8)
 
recommended_books = books_df[books_df['ISBN'].isin(recommended_book_isbns)]
for row in recommended_books.itertuples():
    print(row._3, "-", row._2)